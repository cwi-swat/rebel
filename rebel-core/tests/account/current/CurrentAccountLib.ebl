module account.current.CurrentAccountLib

event openPaymentAccount(accountNr : Integer) {
  postconditions {
    new this.balance == 0;
    new this.accountNumber == accountNr;
  }
}

event denounce() {
	preconditions {
		this.balance >= 0;
	}
}

event close() {}
event indicateRegret() {}
event updateCredit() {}

// Bank is allowed to withdraw when disposition space is not enough
event forcedWithdrawIgnoreDisposition(amount : Integer) {
	preconditions {
	    amount > 0;
	}
	postconditions {
		new this.balance == this.balance - amount;
	}
}

event updateHolds(amount: Integer) {
	preconditions {
		// this.holds <= amount; ???
	}
	postconditions {
		new this.holds == this.holds + amount;
	}
}

// TODO: Add verruimende maatregelen and holds/beperkende maatregelen
event withdraw(amount : Integer) {
	preconditions {
	    amount > 0;
	    // TODO put this in function
	    // Disposition
		this.balance - this.holds >= amount;
	}
	postconditions {
		new this.balance == this.balance - amount;
	}
}

event deposit(amount : Integer) {
	preconditions {
		amount > 0;
	}
	postconditions {
		new this.balance == this.balance + amount;
	}
}
