module booking.sepa.dd.DirectDebitLib

import DateLib

import account.payment.BusinessCurrentAccount

import booking.sepa.dd.CreditBooking
import booking.sepa.dd.DebitBooking

event createDirectDebit(id: Integer, creditor: IBAN, globalCredit: Money, settlementDate: Date) {
	preconditions {
		initialized BusinessCurrentAccount[creditor];
		globalCredit > EUR 0.00;  // Add a check on the allowed maximum as is noted in the Agreement
		// there are probably rules regarding the settlment date
	}
	postconditions {
		new this.id == id;
		new this.creationDate == now;
		new this.totalAmount == globalCredit;
		new this.settlementDate == nextTarget2Day(settlementDate);
		new this.creditBooking == {};
		new this.debitBookings == {};
	}
}

event addCreditBooking(bookingId: Integer) {
	preconditions {
		// there can be only one credit booking
		this.creditBooking == {};
		initialized CreditBooking[bookingId];
		CreditBooking[bookingId].globalCredit == this.totalAmount;
		CreditBooking[bookingId].creditor == this.creditor;
		CreditBooking[bookingId].settlementDate == this.settlementDate;
	}
	postconditions {
		bookingId in this.creditBooking;
	}
}

//invariant onlyOneCreditBooking {
//	all dd:DirectDebit {
//		|dd.creditBooking| == 1
//	}
//}

event addDebitBooking(bookingId: Integer, debtor: IBAN, amount: Money) {
	preconditions {
		not bookingId in this.debitBookings;
		
		initialized DebitBooking[bookingId];
		DebitBooking[bookingId].debtor == debtor;
		DebitBooking[bookingId].amount == amount;
		DebitBooking[bookingId].creditor == this.creditor;
		DebitBooking[bookingId].settlementDate == this.settlementDate;	
	}	
	postconditions {
		bookingId in this.debitBookings;
	}
}

//invariant totalAmountOfDebitBookinsEqualsGlobalCredit {
//}

event execute() {
	preconditions {
		target2DaysBefore(2 Day, this.settlementDate);
		not this.creditBooking == {};
		// The sum of all debit bookings should be equal to the total amount of the direct debit
		this.totalAmount == sum({DebitBooking[id].amount | id <- this.debitBookings});  
	}
}

event finalizeBookings() {
	preconditions {
		allTrue({finalized CreditBooking[id] | id <- this.creditBooking});
		allTrue({finalized DebitBooking[id] | id <- this.debitBookings});
	}
}

